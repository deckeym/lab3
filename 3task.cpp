#include <iostream> // Подключение библиотеки ввода-вывода
#include <vector> // Подключение библиотеки для работы с динамическими массивами
#include <iomanip> // Подключение библиотеки для форматирования вывода
#include <math.h> // Подключение математической библиотеки для математических функций

using namespace std; // Использование стандартного пространства имен

void coffee(double TemprNull, double TemprAverage, double CoolDownCoef, int t, vector<double>& Coffee)
{
    for (int i = 0; i <= t; i++) // Цикл для расчета температуры кофе с течением времени
    {
        Coffee.push_back(TemprNull); // Добавление начальной температуры в вектор Coffee
        TemprNull -=  CoolDownCoef * (TemprNull - TemprAverage); // Обновление температуры на основе коэффициента охлаждения и средней температуры
    }
}

double aproxA(const vector<double>& Coffee)
{
    double Ys = 0; // Сумма значений y
    double Xs = 0; // Сумма значений x
    double XYs = 0; // Сумма значений x*y
    double X2s = 0; // Сумма значений x^2
    int n = Coffee.size(); // Количество точек данных
    
    for (int i = 0; i < n ; i++) // Цикл для суммирования значений для линейной аппроксимации
    {
        Ys  += Coffee[i]; // Добавление текущей температуры к сумме значений y
        Xs  += i; // Добавление текущего времени к сумме значений x
        
        XYs += Coffee[i]; // Добавление текущего значения x*y к сумме
        X2s += i *  i; // Добавление квадрата текущего времени к сумме значений x^2
    }
    return (n * XYs - (Xs * Ys)) / (n * X2s - Xs * Xs); // Возвращение наклона линейной аппроксимации
}

double aproxB(const vector<double>& Coffee)
{
    double Ys = 0, Xs = 0; // Инициализация сумм значений y и x
    double a  = aproxA(Coffee); // Расчет наклона линейной аппроксимации
    int n = Coffee.size(); // Количество точек данных
    
    for (int i = 0; i < n; i++) // Цикл для суммирования значений для линейной аппроксимации
    {
        Ys += Coffee[i]; // Добавление текущей температуры к сумме значений y
        Xs += i; // Добавление текущего времени к сумме значений x
    }
    return (Ys - a * Xs) / n; // Возвращение пересечения линейной аппроксимации
}

double correl(const vector<double>& Coffee)
{
    int n = Coffee.size(); // Количество точек данных
    double sumT = 0.0; // Инициализация суммы температур
    
    for (double T : Coffee) // Цикл для суммирования температур
    {
        sumT += T; // Добавление текущей температуры к сумме
    }
    double SrT = sumT / n; // Расчет средней температуры
    double Srt = (n - 1) * n / 2; // Расчет суммы рангов
    double XYs = 0.0; // Инициализация суммы значений x*y
    double Xs2 = 0.0; // Инициализация суммы значений x^2
    double Ys2 = 0.0; // Инициализация суммы значений y^2
    
    for (int i = 0; i < n; i++) // Цикл для суммирования значений для расчета корреляции
    {
        double tmX = i - Srt; // Расчет значения x на основе ранга
        double tmY = Coffee[i] - SrT; // Расчет отклонения от средней температуры
        
        XYs += tmX * tmY; // Добавление текущего значения x*y к сумме
        Xs2 += tmX * tmX; // Добавление квадрата текущего значения x к сумме
        Ys2 += tmY * tmY; // Добавление квадрата текущего значения y к сумме
    }
    double CoolDownCoef = XYs / sqrt(Xs2 * Ys2); // Расчет коэффициента корреляции
    return CoolDownCoef; // Возвращение коэффициента корреляции
}

int main()
{
    double TemprNull, TemprAverage, CoolDownCoef; // Объявление переменных для начальной температуры, средней температуры и коэффициента охлаждения
    int  t; // Объявление переменной для времени
    vector<double> Coffee; // Объявление вектора для хранения температуры кофе с течением времени
    
    cout << "Пожалуйста, введите начальную температуру кофе, среднюю температуру окружающей среды, коэффициент охлаждения и время охлаждения (время в минутах, разделенные пробелами):" << endl; // Предложение пользователю ввести данные
    cin >> TemprNull >> TemprAverage >> CoolDownCoef >> t; // Считывание введенных значений
    coffee(TemprNull, TemprAverage, CoolDownCoef, t, Coffee); // Расчет температуры кофе с течением времени
    double A = aproxA(Coffee); // Расчет наклона линейной аппроксимации
    double B = aproxB(Coffee); // Расчет пересечения линейной аппроксимации
    double C = correl(Coffee); // Расчет коэффициента корреляции
    t = 0; // Сброс времени
    cout << setw(19) <<  "Время" << setw(25) << "Температура" << endl; // Вывод заголовков таблицы
    for (double T : Coffee) // Цикл для вывода времени и соответствующей температуры
    {
        cout << setw(10) << t <<  setw(10) << T << endl; // Вывод времени и температуры
        t++; // Увеличение времени
    }
    cout << "Прямая аппроксимации: T = " << A << " * t + " << B << endl; // Вывод уравнения линейной аппроксимации
    cout << "Коэффициент корреляции: " << C << endl; // Вывод коэффициента корреляции
}
